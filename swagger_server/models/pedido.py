# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Pedido(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_pedido: str=None, total: int=None, usuario: str=None):  # noqa: E501
        """Pedido - a model defined in Swagger

        :param id_pedido: The id_pedido of this Pedido.  # noqa: E501
        :type id_pedido: str
        :param total: The total of this Pedido.  # noqa: E501
        :type total: int
        :param usuario: The usuario of this Pedido.  # noqa: E501
        :type usuario: str
        """
        self.swagger_types = {
            'id_pedido': str,
            'total': int,
            'usuario': str
        }

        self.attribute_map = {
            'id_pedido': 'idPedido',
            'total': 'total',
            'usuario': 'usuario'
        }
        self._id_pedido = id_pedido
        self._total = total
        self._usuario = usuario

    @classmethod
    def from_dict(cls, dikt) -> 'Pedido':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pedido of this Pedido.  # noqa: E501
        :rtype: Pedido
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_pedido(self) -> str:
        """Gets the id_pedido of this Pedido.


        :return: The id_pedido of this Pedido.
        :rtype: str
        """
        return self._id_pedido

    @id_pedido.setter
    def id_pedido(self, id_pedido: str):
        """Sets the id_pedido of this Pedido.


        :param id_pedido: The id_pedido of this Pedido.
        :type id_pedido: str
        """
        if id_pedido is None:
            raise ValueError("Invalid value for `id_pedido`, must not be `None`")  # noqa: E501

        self._id_pedido = id_pedido

    @property
    def total(self) -> int:
        """Gets the total of this Pedido.


        :return: The total of this Pedido.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this Pedido.


        :param total: The total of this Pedido.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def usuario(self) -> str:
        """Gets the usuario of this Pedido.


        :return: The usuario of this Pedido.
        :rtype: str
        """
        return self._usuario

    @usuario.setter
    def usuario(self, usuario: str):
        """Sets the usuario of this Pedido.


        :param usuario: The usuario of this Pedido.
        :type usuario: str
        """
        if usuario is None:
            raise ValueError("Invalid value for `usuario`, must not be `None`")  # noqa: E501

        self._usuario = usuario
